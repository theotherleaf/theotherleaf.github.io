/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["vendors-node_modules_react-animated-cursor_dist_index_umd_js"],{

/***/ "./node_modules/react-animated-cursor/dist/index.umd.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-animated-cursor/dist/index.umd.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? module.exports = factory(__webpack_require__(/*! react */ \"./node_modules/react/index.js\")) :\n  0;\n})(this, (function (React) { 'use strict';\n\n  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\n  var propTypes = {exports: {}};\n\n  var reactIs = {exports: {}};\n\n  var reactIs_production_min = {};\n\n  /** @license React v16.13.1\n   * react-is.production.min.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var hasRequiredReactIs_production_min;\n\n  function requireReactIs_production_min () {\n  \tif (hasRequiredReactIs_production_min) return reactIs_production_min;\n  \thasRequiredReactIs_production_min = 1;\n  var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\n  \tSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\n  \tfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;\n  \treactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return \"object\"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};\n  \treactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};\n  \treactIs_production_min.isValidElementType=function(a){return \"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;\n  \treturn reactIs_production_min;\n  }\n\n  var reactIs_development = {};\n\n  /** @license React v16.13.1\n   * react-is.development.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var hasRequiredReactIs_development;\n\n  function requireReactIs_development () {\n  \tif (hasRequiredReactIs_development) return reactIs_development;\n  \thasRequiredReactIs_development = 1;\n\n\n\n  \tif (true) {\n  \t  (function() {\n\n  \t// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n  \t// nor polyfill, then a plain number is used for performance.\n  \tvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\n  \tvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\n  \tvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\n  \tvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\n  \tvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\n  \tvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\n  \tvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\n  \tvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n  \t// (unstable) APIs that have been removed. Can we remove the symbols?\n\n  \tvar REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\n  \tvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\n  \tvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\n  \tvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\n  \tvar REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\n  \tvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\n  \tvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\n  \tvar REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;\n  \tvar REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\n  \tvar REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\n  \tvar REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\n\n  \tfunction isValidElementType(type) {\n  \t  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  \t  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n  \t}\n\n  \tfunction typeOf(object) {\n  \t  if (typeof object === 'object' && object !== null) {\n  \t    var $$typeof = object.$$typeof;\n\n  \t    switch ($$typeof) {\n  \t      case REACT_ELEMENT_TYPE:\n  \t        var type = object.type;\n\n  \t        switch (type) {\n  \t          case REACT_ASYNC_MODE_TYPE:\n  \t          case REACT_CONCURRENT_MODE_TYPE:\n  \t          case REACT_FRAGMENT_TYPE:\n  \t          case REACT_PROFILER_TYPE:\n  \t          case REACT_STRICT_MODE_TYPE:\n  \t          case REACT_SUSPENSE_TYPE:\n  \t            return type;\n\n  \t          default:\n  \t            var $$typeofType = type && type.$$typeof;\n\n  \t            switch ($$typeofType) {\n  \t              case REACT_CONTEXT_TYPE:\n  \t              case REACT_FORWARD_REF_TYPE:\n  \t              case REACT_LAZY_TYPE:\n  \t              case REACT_MEMO_TYPE:\n  \t              case REACT_PROVIDER_TYPE:\n  \t                return $$typeofType;\n\n  \t              default:\n  \t                return $$typeof;\n  \t            }\n\n  \t        }\n\n  \t      case REACT_PORTAL_TYPE:\n  \t        return $$typeof;\n  \t    }\n  \t  }\n\n  \t  return undefined;\n  \t} // AsyncMode is deprecated along with isAsyncMode\n\n  \tvar AsyncMode = REACT_ASYNC_MODE_TYPE;\n  \tvar ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\n  \tvar ContextConsumer = REACT_CONTEXT_TYPE;\n  \tvar ContextProvider = REACT_PROVIDER_TYPE;\n  \tvar Element = REACT_ELEMENT_TYPE;\n  \tvar ForwardRef = REACT_FORWARD_REF_TYPE;\n  \tvar Fragment = REACT_FRAGMENT_TYPE;\n  \tvar Lazy = REACT_LAZY_TYPE;\n  \tvar Memo = REACT_MEMO_TYPE;\n  \tvar Portal = REACT_PORTAL_TYPE;\n  \tvar Profiler = REACT_PROFILER_TYPE;\n  \tvar StrictMode = REACT_STRICT_MODE_TYPE;\n  \tvar Suspense = REACT_SUSPENSE_TYPE;\n  \tvar hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n\n  \tfunction isAsyncMode(object) {\n  \t  {\n  \t    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n  \t      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n\n  \t      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');\n  \t    }\n  \t  }\n\n  \t  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n  \t}\n  \tfunction isConcurrentMode(object) {\n  \t  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n  \t}\n  \tfunction isContextConsumer(object) {\n  \t  return typeOf(object) === REACT_CONTEXT_TYPE;\n  \t}\n  \tfunction isContextProvider(object) {\n  \t  return typeOf(object) === REACT_PROVIDER_TYPE;\n  \t}\n  \tfunction isElement(object) {\n  \t  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  \t}\n  \tfunction isForwardRef(object) {\n  \t  return typeOf(object) === REACT_FORWARD_REF_TYPE;\n  \t}\n  \tfunction isFragment(object) {\n  \t  return typeOf(object) === REACT_FRAGMENT_TYPE;\n  \t}\n  \tfunction isLazy(object) {\n  \t  return typeOf(object) === REACT_LAZY_TYPE;\n  \t}\n  \tfunction isMemo(object) {\n  \t  return typeOf(object) === REACT_MEMO_TYPE;\n  \t}\n  \tfunction isPortal(object) {\n  \t  return typeOf(object) === REACT_PORTAL_TYPE;\n  \t}\n  \tfunction isProfiler(object) {\n  \t  return typeOf(object) === REACT_PROFILER_TYPE;\n  \t}\n  \tfunction isStrictMode(object) {\n  \t  return typeOf(object) === REACT_STRICT_MODE_TYPE;\n  \t}\n  \tfunction isSuspense(object) {\n  \t  return typeOf(object) === REACT_SUSPENSE_TYPE;\n  \t}\n\n  \treactIs_development.AsyncMode = AsyncMode;\n  \treactIs_development.ConcurrentMode = ConcurrentMode;\n  \treactIs_development.ContextConsumer = ContextConsumer;\n  \treactIs_development.ContextProvider = ContextProvider;\n  \treactIs_development.Element = Element;\n  \treactIs_development.ForwardRef = ForwardRef;\n  \treactIs_development.Fragment = Fragment;\n  \treactIs_development.Lazy = Lazy;\n  \treactIs_development.Memo = Memo;\n  \treactIs_development.Portal = Portal;\n  \treactIs_development.Profiler = Profiler;\n  \treactIs_development.StrictMode = StrictMode;\n  \treactIs_development.Suspense = Suspense;\n  \treactIs_development.isAsyncMode = isAsyncMode;\n  \treactIs_development.isConcurrentMode = isConcurrentMode;\n  \treactIs_development.isContextConsumer = isContextConsumer;\n  \treactIs_development.isContextProvider = isContextProvider;\n  \treactIs_development.isElement = isElement;\n  \treactIs_development.isForwardRef = isForwardRef;\n  \treactIs_development.isFragment = isFragment;\n  \treactIs_development.isLazy = isLazy;\n  \treactIs_development.isMemo = isMemo;\n  \treactIs_development.isPortal = isPortal;\n  \treactIs_development.isProfiler = isProfiler;\n  \treactIs_development.isStrictMode = isStrictMode;\n  \treactIs_development.isSuspense = isSuspense;\n  \treactIs_development.isValidElementType = isValidElementType;\n  \treactIs_development.typeOf = typeOf;\n  \t  })();\n  \t}\n  \treturn reactIs_development;\n  }\n\n  var hasRequiredReactIs;\n\n  function requireReactIs () {\n  \tif (hasRequiredReactIs) return reactIs.exports;\n  \thasRequiredReactIs = 1;\n  \t(function (module) {\n\n  \t\tif (false) {} else {\n  \t\t  module.exports = requireReactIs_development();\n  \t\t}\n  } (reactIs));\n  \treturn reactIs.exports;\n  }\n\n  /*\n  object-assign\n  (c) Sindre Sorhus\n  @license MIT\n  */\n\n  var objectAssign;\n  var hasRequiredObjectAssign;\n\n  function requireObjectAssign () {\n  \tif (hasRequiredObjectAssign) return objectAssign;\n  \thasRequiredObjectAssign = 1;\n  \t/* eslint-disable no-unused-vars */\n  \tvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\n  \tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n  \tvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\n  \tfunction toObject(val) {\n  \t\tif (val === null || val === undefined) {\n  \t\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n  \t\t}\n\n  \t\treturn Object(val);\n  \t}\n\n  \tfunction shouldUseNative() {\n  \t\ttry {\n  \t\t\tif (!Object.assign) {\n  \t\t\t\treturn false;\n  \t\t\t}\n\n  \t\t\t// Detect buggy property enumeration order in older V8 versions.\n\n  \t\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n  \t\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n  \t\t\ttest1[5] = 'de';\n  \t\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n  \t\t\t\treturn false;\n  \t\t\t}\n\n  \t\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n  \t\t\tvar test2 = {};\n  \t\t\tfor (var i = 0; i < 10; i++) {\n  \t\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n  \t\t\t}\n  \t\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n  \t\t\t\treturn test2[n];\n  \t\t\t});\n  \t\t\tif (order2.join('') !== '0123456789') {\n  \t\t\t\treturn false;\n  \t\t\t}\n\n  \t\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n  \t\t\tvar test3 = {};\n  \t\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n  \t\t\t\ttest3[letter] = letter;\n  \t\t\t});\n  \t\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n  \t\t\t\t\t'abcdefghijklmnopqrst') {\n  \t\t\t\treturn false;\n  \t\t\t}\n\n  \t\t\treturn true;\n  \t\t} catch (err) {\n  \t\t\t// We don't expect any of the above to throw, but better to be safe.\n  \t\t\treturn false;\n  \t\t}\n  \t}\n\n  \tobjectAssign = shouldUseNative() ? Object.assign : function (target, source) {\n  \t\tvar from;\n  \t\tvar to = toObject(target);\n  \t\tvar symbols;\n\n  \t\tfor (var s = 1; s < arguments.length; s++) {\n  \t\t\tfrom = Object(arguments[s]);\n\n  \t\t\tfor (var key in from) {\n  \t\t\t\tif (hasOwnProperty.call(from, key)) {\n  \t\t\t\t\tto[key] = from[key];\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\tif (getOwnPropertySymbols) {\n  \t\t\t\tsymbols = getOwnPropertySymbols(from);\n  \t\t\t\tfor (var i = 0; i < symbols.length; i++) {\n  \t\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n  \t\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n\n  \t\treturn to;\n  \t};\n  \treturn objectAssign;\n  }\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var ReactPropTypesSecret_1;\n  var hasRequiredReactPropTypesSecret;\n\n  function requireReactPropTypesSecret () {\n  \tif (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;\n  \thasRequiredReactPropTypesSecret = 1;\n\n  \tvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\n  \tReactPropTypesSecret_1 = ReactPropTypesSecret;\n  \treturn ReactPropTypesSecret_1;\n  }\n\n  var has;\n  var hasRequiredHas;\n\n  function requireHas () {\n  \tif (hasRequiredHas) return has;\n  \thasRequiredHas = 1;\n  \thas = Function.call.bind(Object.prototype.hasOwnProperty);\n  \treturn has;\n  }\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var checkPropTypes_1;\n  var hasRequiredCheckPropTypes;\n\n  function requireCheckPropTypes () {\n  \tif (hasRequiredCheckPropTypes) return checkPropTypes_1;\n  \thasRequiredCheckPropTypes = 1;\n\n  \tvar printWarning = function() {};\n\n  \tif (true) {\n  \t  var ReactPropTypesSecret = requireReactPropTypesSecret();\n  \t  var loggedTypeFailures = {};\n  \t  var has = requireHas();\n\n  \t  printWarning = function(text) {\n  \t    var message = 'Warning: ' + text;\n  \t    if (typeof console !== 'undefined') {\n  \t      console.error(message);\n  \t    }\n  \t    try {\n  \t      // --- Welcome to debugging React ---\n  \t      // This error was thrown as a convenience so that you can use this stack\n  \t      // to find the callsite that caused this warning to fire.\n  \t      throw new Error(message);\n  \t    } catch (x) { /**/ }\n  \t  };\n  \t}\n\n  \t/**\n  \t * Assert that the values match with the type specs.\n  \t * Error messages are memorized and will only be shown once.\n  \t *\n  \t * @param {object} typeSpecs Map of name to a ReactPropType\n  \t * @param {object} values Runtime values that need to be type-checked\n  \t * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n  \t * @param {string} componentName Name of the component for error messages.\n  \t * @param {?Function} getStack Returns the component stack.\n  \t * @private\n  \t */\n  \tfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  \t  if (true) {\n  \t    for (var typeSpecName in typeSpecs) {\n  \t      if (has(typeSpecs, typeSpecName)) {\n  \t        var error;\n  \t        // Prop type validation may throw. In case they do, we don't want to\n  \t        // fail the render phase where it didn't fail before. So we log it.\n  \t        // After these have been cleaned up, we'll let them throw.\n  \t        try {\n  \t          // This is intentionally an invariant that gets caught. It's the same\n  \t          // behavior as without this statement except with a better message.\n  \t          if (typeof typeSpecs[typeSpecName] !== 'function') {\n  \t            var err = Error(\n  \t              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n  \t              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +\n  \t              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'\n  \t            );\n  \t            err.name = 'Invariant Violation';\n  \t            throw err;\n  \t          }\n  \t          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n  \t        } catch (ex) {\n  \t          error = ex;\n  \t        }\n  \t        if (error && !(error instanceof Error)) {\n  \t          printWarning(\n  \t            (componentName || 'React class') + ': type specification of ' +\n  \t            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n  \t            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n  \t            'You may have forgotten to pass an argument to the type checker ' +\n  \t            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n  \t            'shape all require an argument).'\n  \t          );\n  \t        }\n  \t        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n  \t          // Only monitor this failure once because there tends to be a lot of the\n  \t          // same error.\n  \t          loggedTypeFailures[error.message] = true;\n\n  \t          var stack = getStack ? getStack() : '';\n\n  \t          printWarning(\n  \t            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n  \t          );\n  \t        }\n  \t      }\n  \t    }\n  \t  }\n  \t}\n\n  \t/**\n  \t * Resets warning cache when testing.\n  \t *\n  \t * @private\n  \t */\n  \tcheckPropTypes.resetWarningCache = function() {\n  \t  if (true) {\n  \t    loggedTypeFailures = {};\n  \t  }\n  \t};\n\n  \tcheckPropTypes_1 = checkPropTypes;\n  \treturn checkPropTypes_1;\n  }\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var factoryWithTypeCheckers;\n  var hasRequiredFactoryWithTypeCheckers;\n\n  function requireFactoryWithTypeCheckers () {\n  \tif (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;\n  \thasRequiredFactoryWithTypeCheckers = 1;\n\n  \tvar ReactIs = requireReactIs();\n  \tvar assign = requireObjectAssign();\n\n  \tvar ReactPropTypesSecret = requireReactPropTypesSecret();\n  \tvar has = requireHas();\n  \tvar checkPropTypes = requireCheckPropTypes();\n\n  \tvar printWarning = function() {};\n\n  \tif (true) {\n  \t  printWarning = function(text) {\n  \t    var message = 'Warning: ' + text;\n  \t    if (typeof console !== 'undefined') {\n  \t      console.error(message);\n  \t    }\n  \t    try {\n  \t      // --- Welcome to debugging React ---\n  \t      // This error was thrown as a convenience so that you can use this stack\n  \t      // to find the callsite that caused this warning to fire.\n  \t      throw new Error(message);\n  \t    } catch (x) {}\n  \t  };\n  \t}\n\n  \tfunction emptyFunctionThatReturnsNull() {\n  \t  return null;\n  \t}\n\n  \tfactoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {\n  \t  /* global Symbol */\n  \t  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  \t  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  \t  /**\n  \t   * Returns the iterator method function contained on the iterable object.\n  \t   *\n  \t   * Be sure to invoke the function with the iterable as context:\n  \t   *\n  \t   *     var iteratorFn = getIteratorFn(myIterable);\n  \t   *     if (iteratorFn) {\n  \t   *       var iterator = iteratorFn.call(myIterable);\n  \t   *       ...\n  \t   *     }\n  \t   *\n  \t   * @param {?object} maybeIterable\n  \t   * @return {?function}\n  \t   */\n  \t  function getIteratorFn(maybeIterable) {\n  \t    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n  \t    if (typeof iteratorFn === 'function') {\n  \t      return iteratorFn;\n  \t    }\n  \t  }\n\n  \t  /**\n  \t   * Collection of methods that allow declaration and validation of props that are\n  \t   * supplied to React components. Example usage:\n  \t   *\n  \t   *   var Props = require('ReactPropTypes');\n  \t   *   var MyArticle = React.createClass({\n  \t   *     propTypes: {\n  \t   *       // An optional string prop named \"description\".\n  \t   *       description: Props.string,\n  \t   *\n  \t   *       // A required enum prop named \"category\".\n  \t   *       category: Props.oneOf(['News','Photos']).isRequired,\n  \t   *\n  \t   *       // A prop named \"dialog\" that requires an instance of Dialog.\n  \t   *       dialog: Props.instanceOf(Dialog).isRequired\n  \t   *     },\n  \t   *     render: function() { ... }\n  \t   *   });\n  \t   *\n  \t   * A more formal specification of how these methods are used:\n  \t   *\n  \t   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n  \t   *   decl := ReactPropTypes.{type}(.isRequired)?\n  \t   *\n  \t   * Each and every declaration produces a function with the same signature. This\n  \t   * allows the creation of custom validation functions. For example:\n  \t   *\n  \t   *  var MyLink = React.createClass({\n  \t   *    propTypes: {\n  \t   *      // An optional string or URI prop named \"href\".\n  \t   *      href: function(props, propName, componentName) {\n  \t   *        var propValue = props[propName];\n  \t   *        if (propValue != null && typeof propValue !== 'string' &&\n  \t   *            !(propValue instanceof URI)) {\n  \t   *          return new Error(\n  \t   *            'Expected a string or an URI for ' + propName + ' in ' +\n  \t   *            componentName\n  \t   *          );\n  \t   *        }\n  \t   *      }\n  \t   *    },\n  \t   *    render: function() {...}\n  \t   *  });\n  \t   *\n  \t   * @internal\n  \t   */\n\n  \t  var ANONYMOUS = '<<anonymous>>';\n\n  \t  // Important!\n  \t  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  \t  var ReactPropTypes = {\n  \t    array: createPrimitiveTypeChecker('array'),\n  \t    bigint: createPrimitiveTypeChecker('bigint'),\n  \t    bool: createPrimitiveTypeChecker('boolean'),\n  \t    func: createPrimitiveTypeChecker('function'),\n  \t    number: createPrimitiveTypeChecker('number'),\n  \t    object: createPrimitiveTypeChecker('object'),\n  \t    string: createPrimitiveTypeChecker('string'),\n  \t    symbol: createPrimitiveTypeChecker('symbol'),\n\n  \t    any: createAnyTypeChecker(),\n  \t    arrayOf: createArrayOfTypeChecker,\n  \t    element: createElementTypeChecker(),\n  \t    elementType: createElementTypeTypeChecker(),\n  \t    instanceOf: createInstanceTypeChecker,\n  \t    node: createNodeChecker(),\n  \t    objectOf: createObjectOfTypeChecker,\n  \t    oneOf: createEnumTypeChecker,\n  \t    oneOfType: createUnionTypeChecker,\n  \t    shape: createShapeTypeChecker,\n  \t    exact: createStrictShapeTypeChecker,\n  \t  };\n\n  \t  /**\n  \t   * inlined Object.is polyfill to avoid requiring consumers ship their own\n  \t   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  \t   */\n  \t  /*eslint-disable no-self-compare*/\n  \t  function is(x, y) {\n  \t    // SameValue algorithm\n  \t    if (x === y) {\n  \t      // Steps 1-5, 7-10\n  \t      // Steps 6.b-6.e: +0 != -0\n  \t      return x !== 0 || 1 / x === 1 / y;\n  \t    } else {\n  \t      // Step 6.a: NaN == NaN\n  \t      return x !== x && y !== y;\n  \t    }\n  \t  }\n  \t  /*eslint-enable no-self-compare*/\n\n  \t  /**\n  \t   * We use an Error-like object for backward compatibility as people may call\n  \t   * PropTypes directly and inspect their output. However, we don't use real\n  \t   * Errors anymore. We don't inspect their stack anyway, and creating them\n  \t   * is prohibitively expensive if they are created too often, such as what\n  \t   * happens in oneOfType() for any type before the one that matched.\n  \t   */\n  \t  function PropTypeError(message, data) {\n  \t    this.message = message;\n  \t    this.data = data && typeof data === 'object' ? data: {};\n  \t    this.stack = '';\n  \t  }\n  \t  // Make `instanceof Error` still work for returned errors.\n  \t  PropTypeError.prototype = Error.prototype;\n\n  \t  function createChainableTypeChecker(validate) {\n  \t    if (true) {\n  \t      var manualPropTypeCallCache = {};\n  \t      var manualPropTypeWarningCount = 0;\n  \t    }\n  \t    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n  \t      componentName = componentName || ANONYMOUS;\n  \t      propFullName = propFullName || propName;\n\n  \t      if (secret !== ReactPropTypesSecret) {\n  \t        if (throwOnDirectAccess) {\n  \t          // New behavior only for users of `prop-types` package\n  \t          var err = new Error(\n  \t            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n  \t            'Use `PropTypes.checkPropTypes()` to call them. ' +\n  \t            'Read more at http://fb.me/use-check-prop-types'\n  \t          );\n  \t          err.name = 'Invariant Violation';\n  \t          throw err;\n  \t        } else if ( true && typeof console !== 'undefined') {\n  \t          // Old behavior for people using React.PropTypes\n  \t          var cacheKey = componentName + ':' + propName;\n  \t          if (\n  \t            !manualPropTypeCallCache[cacheKey] &&\n  \t            // Avoid spamming the console because they are often not actionable except for lib authors\n  \t            manualPropTypeWarningCount < 3\n  \t          ) {\n  \t            printWarning(\n  \t              'You are manually calling a React.PropTypes validation ' +\n  \t              'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +\n  \t              'and will throw in the standalone `prop-types` package. ' +\n  \t              'You may be seeing this warning due to a third-party PropTypes ' +\n  \t              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'\n  \t            );\n  \t            manualPropTypeCallCache[cacheKey] = true;\n  \t            manualPropTypeWarningCount++;\n  \t          }\n  \t        }\n  \t      }\n  \t      if (props[propName] == null) {\n  \t        if (isRequired) {\n  \t          if (props[propName] === null) {\n  \t            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n  \t          }\n  \t          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n  \t        }\n  \t        return null;\n  \t      } else {\n  \t        return validate(props, propName, componentName, location, propFullName);\n  \t      }\n  \t    }\n\n  \t    var chainedCheckType = checkType.bind(null, false);\n  \t    chainedCheckType.isRequired = checkType.bind(null, true);\n\n  \t    return chainedCheckType;\n  \t  }\n\n  \t  function createPrimitiveTypeChecker(expectedType) {\n  \t    function validate(props, propName, componentName, location, propFullName, secret) {\n  \t      var propValue = props[propName];\n  \t      var propType = getPropType(propValue);\n  \t      if (propType !== expectedType) {\n  \t        // `propValue` being instance of, say, date/regexp, pass the 'object'\n  \t        // check, but we can offer a more precise error message here rather than\n  \t        // 'of type `object`'.\n  \t        var preciseType = getPreciseType(propValue);\n\n  \t        return new PropTypeError(\n  \t          'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),\n  \t          {expectedType: expectedType}\n  \t        );\n  \t      }\n  \t      return null;\n  \t    }\n  \t    return createChainableTypeChecker(validate);\n  \t  }\n\n  \t  function createAnyTypeChecker() {\n  \t    return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n  \t  }\n\n  \t  function createArrayOfTypeChecker(typeChecker) {\n  \t    function validate(props, propName, componentName, location, propFullName) {\n  \t      if (typeof typeChecker !== 'function') {\n  \t        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n  \t      }\n  \t      var propValue = props[propName];\n  \t      if (!Array.isArray(propValue)) {\n  \t        var propType = getPropType(propValue);\n  \t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n  \t      }\n  \t      for (var i = 0; i < propValue.length; i++) {\n  \t        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n  \t        if (error instanceof Error) {\n  \t          return error;\n  \t        }\n  \t      }\n  \t      return null;\n  \t    }\n  \t    return createChainableTypeChecker(validate);\n  \t  }\n\n  \t  function createElementTypeChecker() {\n  \t    function validate(props, propName, componentName, location, propFullName) {\n  \t      var propValue = props[propName];\n  \t      if (!isValidElement(propValue)) {\n  \t        var propType = getPropType(propValue);\n  \t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n  \t      }\n  \t      return null;\n  \t    }\n  \t    return createChainableTypeChecker(validate);\n  \t  }\n\n  \t  function createElementTypeTypeChecker() {\n  \t    function validate(props, propName, componentName, location, propFullName) {\n  \t      var propValue = props[propName];\n  \t      if (!ReactIs.isValidElementType(propValue)) {\n  \t        var propType = getPropType(propValue);\n  \t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));\n  \t      }\n  \t      return null;\n  \t    }\n  \t    return createChainableTypeChecker(validate);\n  \t  }\n\n  \t  function createInstanceTypeChecker(expectedClass) {\n  \t    function validate(props, propName, componentName, location, propFullName) {\n  \t      if (!(props[propName] instanceof expectedClass)) {\n  \t        var expectedClassName = expectedClass.name || ANONYMOUS;\n  \t        var actualClassName = getClassName(props[propName]);\n  \t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n  \t      }\n  \t      return null;\n  \t    }\n  \t    return createChainableTypeChecker(validate);\n  \t  }\n\n  \t  function createEnumTypeChecker(expectedValues) {\n  \t    if (!Array.isArray(expectedValues)) {\n  \t      if (true) {\n  \t        if (arguments.length > 1) {\n  \t          printWarning(\n  \t            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +\n  \t            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'\n  \t          );\n  \t        } else {\n  \t          printWarning('Invalid argument supplied to oneOf, expected an array.');\n  \t        }\n  \t      }\n  \t      return emptyFunctionThatReturnsNull;\n  \t    }\n\n  \t    function validate(props, propName, componentName, location, propFullName) {\n  \t      var propValue = props[propName];\n  \t      for (var i = 0; i < expectedValues.length; i++) {\n  \t        if (is(propValue, expectedValues[i])) {\n  \t          return null;\n  \t        }\n  \t      }\n\n  \t      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {\n  \t        var type = getPreciseType(value);\n  \t        if (type === 'symbol') {\n  \t          return String(value);\n  \t        }\n  \t        return value;\n  \t      });\n  \t      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n  \t    }\n  \t    return createChainableTypeChecker(validate);\n  \t  }\n\n  \t  function createObjectOfTypeChecker(typeChecker) {\n  \t    function validate(props, propName, componentName, location, propFullName) {\n  \t      if (typeof typeChecker !== 'function') {\n  \t        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n  \t      }\n  \t      var propValue = props[propName];\n  \t      var propType = getPropType(propValue);\n  \t      if (propType !== 'object') {\n  \t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n  \t      }\n  \t      for (var key in propValue) {\n  \t        if (has(propValue, key)) {\n  \t          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n  \t          if (error instanceof Error) {\n  \t            return error;\n  \t          }\n  \t        }\n  \t      }\n  \t      return null;\n  \t    }\n  \t    return createChainableTypeChecker(validate);\n  \t  }\n\n  \t  function createUnionTypeChecker(arrayOfTypeCheckers) {\n  \t    if (!Array.isArray(arrayOfTypeCheckers)) {\n  \t       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : 0;\n  \t      return emptyFunctionThatReturnsNull;\n  \t    }\n\n  \t    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n  \t      var checker = arrayOfTypeCheckers[i];\n  \t      if (typeof checker !== 'function') {\n  \t        printWarning(\n  \t          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n  \t          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'\n  \t        );\n  \t        return emptyFunctionThatReturnsNull;\n  \t      }\n  \t    }\n\n  \t    function validate(props, propName, componentName, location, propFullName) {\n  \t      var expectedTypes = [];\n  \t      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n  \t        var checker = arrayOfTypeCheckers[i];\n  \t        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);\n  \t        if (checkerResult == null) {\n  \t          return null;\n  \t        }\n  \t        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {\n  \t          expectedTypes.push(checkerResult.data.expectedType);\n  \t        }\n  \t      }\n  \t      var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';\n  \t      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));\n  \t    }\n  \t    return createChainableTypeChecker(validate);\n  \t  }\n\n  \t  function createNodeChecker() {\n  \t    function validate(props, propName, componentName, location, propFullName) {\n  \t      if (!isNode(props[propName])) {\n  \t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n  \t      }\n  \t      return null;\n  \t    }\n  \t    return createChainableTypeChecker(validate);\n  \t  }\n\n  \t  function invalidValidatorError(componentName, location, propFullName, key, type) {\n  \t    return new PropTypeError(\n  \t      (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +\n  \t      'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'\n  \t    );\n  \t  }\n\n  \t  function createShapeTypeChecker(shapeTypes) {\n  \t    function validate(props, propName, componentName, location, propFullName) {\n  \t      var propValue = props[propName];\n  \t      var propType = getPropType(propValue);\n  \t      if (propType !== 'object') {\n  \t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n  \t      }\n  \t      for (var key in shapeTypes) {\n  \t        var checker = shapeTypes[key];\n  \t        if (typeof checker !== 'function') {\n  \t          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));\n  \t        }\n  \t        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n  \t        if (error) {\n  \t          return error;\n  \t        }\n  \t      }\n  \t      return null;\n  \t    }\n  \t    return createChainableTypeChecker(validate);\n  \t  }\n\n  \t  function createStrictShapeTypeChecker(shapeTypes) {\n  \t    function validate(props, propName, componentName, location, propFullName) {\n  \t      var propValue = props[propName];\n  \t      var propType = getPropType(propValue);\n  \t      if (propType !== 'object') {\n  \t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n  \t      }\n  \t      // We need to check all keys in case some are required but missing from props.\n  \t      var allKeys = assign({}, props[propName], shapeTypes);\n  \t      for (var key in allKeys) {\n  \t        var checker = shapeTypes[key];\n  \t        if (has(shapeTypes, key) && typeof checker !== 'function') {\n  \t          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));\n  \t        }\n  \t        if (!checker) {\n  \t          return new PropTypeError(\n  \t            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n  \t            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n  \t            '\\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')\n  \t          );\n  \t        }\n  \t        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n  \t        if (error) {\n  \t          return error;\n  \t        }\n  \t      }\n  \t      return null;\n  \t    }\n\n  \t    return createChainableTypeChecker(validate);\n  \t  }\n\n  \t  function isNode(propValue) {\n  \t    switch (typeof propValue) {\n  \t      case 'number':\n  \t      case 'string':\n  \t      case 'undefined':\n  \t        return true;\n  \t      case 'boolean':\n  \t        return !propValue;\n  \t      case 'object':\n  \t        if (Array.isArray(propValue)) {\n  \t          return propValue.every(isNode);\n  \t        }\n  \t        if (propValue === null || isValidElement(propValue)) {\n  \t          return true;\n  \t        }\n\n  \t        var iteratorFn = getIteratorFn(propValue);\n  \t        if (iteratorFn) {\n  \t          var iterator = iteratorFn.call(propValue);\n  \t          var step;\n  \t          if (iteratorFn !== propValue.entries) {\n  \t            while (!(step = iterator.next()).done) {\n  \t              if (!isNode(step.value)) {\n  \t                return false;\n  \t              }\n  \t            }\n  \t          } else {\n  \t            // Iterator will provide entry [k,v] tuples rather than values.\n  \t            while (!(step = iterator.next()).done) {\n  \t              var entry = step.value;\n  \t              if (entry) {\n  \t                if (!isNode(entry[1])) {\n  \t                  return false;\n  \t                }\n  \t              }\n  \t            }\n  \t          }\n  \t        } else {\n  \t          return false;\n  \t        }\n\n  \t        return true;\n  \t      default:\n  \t        return false;\n  \t    }\n  \t  }\n\n  \t  function isSymbol(propType, propValue) {\n  \t    // Native Symbol.\n  \t    if (propType === 'symbol') {\n  \t      return true;\n  \t    }\n\n  \t    // falsy value can't be a Symbol\n  \t    if (!propValue) {\n  \t      return false;\n  \t    }\n\n  \t    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n  \t    if (propValue['@@toStringTag'] === 'Symbol') {\n  \t      return true;\n  \t    }\n\n  \t    // Fallback for non-spec compliant Symbols which are polyfilled.\n  \t    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n  \t      return true;\n  \t    }\n\n  \t    return false;\n  \t  }\n\n  \t  // Equivalent of `typeof` but with special handling for array and regexp.\n  \t  function getPropType(propValue) {\n  \t    var propType = typeof propValue;\n  \t    if (Array.isArray(propValue)) {\n  \t      return 'array';\n  \t    }\n  \t    if (propValue instanceof RegExp) {\n  \t      // Old webkits (at least until Android 4.0) return 'function' rather than\n  \t      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n  \t      // passes PropTypes.object.\n  \t      return 'object';\n  \t    }\n  \t    if (isSymbol(propType, propValue)) {\n  \t      return 'symbol';\n  \t    }\n  \t    return propType;\n  \t  }\n\n  \t  // This handles more types than `getPropType`. Only used for error messages.\n  \t  // See `createPrimitiveTypeChecker`.\n  \t  function getPreciseType(propValue) {\n  \t    if (typeof propValue === 'undefined' || propValue === null) {\n  \t      return '' + propValue;\n  \t    }\n  \t    var propType = getPropType(propValue);\n  \t    if (propType === 'object') {\n  \t      if (propValue instanceof Date) {\n  \t        return 'date';\n  \t      } else if (propValue instanceof RegExp) {\n  \t        return 'regexp';\n  \t      }\n  \t    }\n  \t    return propType;\n  \t  }\n\n  \t  // Returns a string that is postfixed to a warning about an invalid type.\n  \t  // For example, \"undefined\" or \"of type array\"\n  \t  function getPostfixForTypeWarning(value) {\n  \t    var type = getPreciseType(value);\n  \t    switch (type) {\n  \t      case 'array':\n  \t      case 'object':\n  \t        return 'an ' + type;\n  \t      case 'boolean':\n  \t      case 'date':\n  \t      case 'regexp':\n  \t        return 'a ' + type;\n  \t      default:\n  \t        return type;\n  \t    }\n  \t  }\n\n  \t  // Returns class name of the object, if any.\n  \t  function getClassName(propValue) {\n  \t    if (!propValue.constructor || !propValue.constructor.name) {\n  \t      return ANONYMOUS;\n  \t    }\n  \t    return propValue.constructor.name;\n  \t  }\n\n  \t  ReactPropTypes.checkPropTypes = checkPropTypes;\n  \t  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;\n  \t  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  \t  return ReactPropTypes;\n  \t};\n  \treturn factoryWithTypeCheckers;\n  }\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var factoryWithThrowingShims;\n  var hasRequiredFactoryWithThrowingShims;\n\n  function requireFactoryWithThrowingShims () {\n  \tif (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;\n  \thasRequiredFactoryWithThrowingShims = 1;\n\n  \tvar ReactPropTypesSecret = requireReactPropTypesSecret();\n\n  \tfunction emptyFunction() {}\n  \tfunction emptyFunctionWithReset() {}\n  \temptyFunctionWithReset.resetWarningCache = emptyFunction;\n\n  \tfactoryWithThrowingShims = function() {\n  \t  function shim(props, propName, componentName, location, propFullName, secret) {\n  \t    if (secret === ReactPropTypesSecret) {\n  \t      // It is still safe when called from React.\n  \t      return;\n  \t    }\n  \t    var err = new Error(\n  \t      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n  \t      'Use PropTypes.checkPropTypes() to call them. ' +\n  \t      'Read more at http://fb.me/use-check-prop-types'\n  \t    );\n  \t    err.name = 'Invariant Violation';\n  \t    throw err;\n  \t  }\t  shim.isRequired = shim;\n  \t  function getShim() {\n  \t    return shim;\n  \t  }\t  // Important!\n  \t  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  \t  var ReactPropTypes = {\n  \t    array: shim,\n  \t    bigint: shim,\n  \t    bool: shim,\n  \t    func: shim,\n  \t    number: shim,\n  \t    object: shim,\n  \t    string: shim,\n  \t    symbol: shim,\n\n  \t    any: shim,\n  \t    arrayOf: getShim,\n  \t    element: shim,\n  \t    elementType: shim,\n  \t    instanceOf: getShim,\n  \t    node: shim,\n  \t    objectOf: getShim,\n  \t    oneOf: getShim,\n  \t    oneOfType: getShim,\n  \t    shape: getShim,\n  \t    exact: getShim,\n\n  \t    checkPropTypes: emptyFunctionWithReset,\n  \t    resetWarningCache: emptyFunction\n  \t  };\n\n  \t  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  \t  return ReactPropTypes;\n  \t};\n  \treturn factoryWithThrowingShims;\n  }\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  if (true) {\n    var ReactIs = requireReactIs();\n\n    // By explicitly using `prop-types` you are opting into new development behavior.\n    // http://fb.me/prop-types-in-prod\n    var throwOnDirectAccess = true;\n    propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);\n  } else {}\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n\n  /**\n   * useEventListener\n   * Hook for handling EventListeners\n   * @return {object} width, height\n   */\n\n  function useEventListener(eventName, handler, element = window) {\n    // Create a ref that stores handler\n    const savedHandler = React.useRef(); // Update ref.current value if handler changes.\n\n    React.useEffect(() => {\n      savedHandler.current = handler;\n    }, [handler]);\n    React.useEffect(() => {\n      // Make sure element supports addEventListener\n      const isSupported = element && element.addEventListener;\n      if (!isSupported) return; // Create event listener that calls handler function stored in ref\n\n      const eventListener = event => savedHandler.current(event); // Add event listener\n\n\n      element.addEventListener(eventName, eventListener); // Remove event listener on cleanup\n\n      return () => {\n        element.removeEventListener(eventName, eventListener);\n      };\n    }, [eventName, element] // Re-run if eventName or element changes\n    );\n  }\n\n  const IsDevice = (() => {\n    if (typeof navigator == 'undefined') return;\n    let ua = navigator.userAgent;\n    return {\n      info: ua,\n\n      Android() {\n        return ua.match(/Android/i);\n      },\n\n      BlackBerry() {\n        return ua.match(/BlackBerry/i);\n      },\n\n      IEMobile() {\n        return ua.match(/IEMobile/i);\n      },\n\n      iOS() {\n        return ua.match(/iPhone|iPad|iPod/i);\n      },\n\n      iPad() {\n        return ua.match(/Mac/) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2;\n      },\n\n      OperaMini() {\n        return ua.match(/Opera Mini/i);\n      },\n\n      /**\n       * Any Device\n       */\n      any() {\n        return IsDevice.Android() || IsDevice.BlackBerry() || IsDevice.iOS() || IsDevice.iPad() || IsDevice.OperaMini() || IsDevice.IEMobile();\n      }\n\n    };\n  })(); // Export\n\n  /**\n   * Cursor Core\n   * Replaces the native cursor with a custom animated cursor, consisting\n   * of an inner and outer dot that scale inversely based on hover or click.\n   *\n   * @author Stephen Scaff (github.com/stephenscaff)\n   *\n   * @param {string} color - rgb color value\n   * @param {number} outerAlpha - level of alpha transparency for color\n   * @param {number} innerSize - inner cursor size in px\n   * @param {number} innerScale - inner cursor scale amount\n   * @param {number} outerSize - outer cursor size in px\n   * @param {number} outerScale - outer cursor scale amount\n   * @param {object} outerStyle - style object for outer cursor\n   * @param {object} innerStyle - style object for inner cursor\n   * @param {array}  clickables - array of clickable selectors\n   *\n   */\n\n  function CursorCore({\n    outerStyle,\n    innerStyle,\n    color = '220, 90, 90',\n    outerAlpha = 0.3,\n    innerSize = 8,\n    outerSize = 8,\n    outerScale = 6,\n    innerScale = 0.6,\n    trailingSpeed = 8,\n    clickables = ['a', 'input[type=\"text\"]', 'input[type=\"email\"]', 'input[type=\"number\"]', 'input[type=\"submit\"]', 'input[type=\"image\"]', 'label[for]', 'select', 'textarea', 'button', '.link']\n  }) {\n    const cursorOuterRef = React.useRef();\n    const cursorInnerRef = React.useRef();\n    const requestRef = React.useRef();\n    const previousTimeRef = React.useRef();\n    const [coords, setCoords] = React.useState({\n      x: 0,\n      y: 0\n    });\n    const [isVisible, setIsVisible] = React.useState(false);\n    const [isActive, setIsActive] = React.useState(false);\n    const [isActiveClickable, setIsActiveClickable] = React.useState(false);\n    let endX = React.useRef(0);\n    let endY = React.useRef(0);\n    /**\n     * Primary Mouse move event\n     * @param {number} clientX - MouseEvent.clientx\n     * @param {number} clientY - MouseEvent.clienty\n     */\n\n    const onMouseMove = React.useCallback(({\n      clientX,\n      clientY\n    }) => {\n      setCoords({\n        x: clientX,\n        y: clientY\n      });\n      cursorInnerRef.current.style.top = `${clientY}px`;\n      cursorInnerRef.current.style.left = `${clientX}px`;\n      endX.current = clientX;\n      endY.current = clientY;\n    }, []); // Outer Cursor Animation Delay\n\n    const animateOuterCursor = React.useCallback(time => {\n      if (previousTimeRef.current !== undefined) {\n        coords.x += (endX.current - coords.x) / trailingSpeed;\n        coords.y += (endY.current - coords.y) / trailingSpeed;\n        cursorOuterRef.current.style.top = `${coords.y}px`;\n        cursorOuterRef.current.style.left = `${coords.x}px`;\n      }\n\n      previousTimeRef.current = time;\n      requestRef.current = requestAnimationFrame(animateOuterCursor);\n    }, [requestRef] // eslint-disable-line\n    ); // RAF for animateOuterCursor\n\n    React.useEffect(() => {\n      requestRef.current = requestAnimationFrame(animateOuterCursor);\n      return () => cancelAnimationFrame(requestRef.current);\n    }, [animateOuterCursor]); // Mouse Events State updates\n\n    const onMouseDown = React.useCallback(() => setIsActive(true), []);\n    const onMouseUp = React.useCallback(() => setIsActive(false), []);\n    const onMouseEnterViewport = React.useCallback(() => setIsVisible(true), []);\n    const onMouseLeaveViewport = React.useCallback(() => setIsVisible(false), []);\n    useEventListener('mousemove', onMouseMove);\n    useEventListener('mousedown', onMouseDown);\n    useEventListener('mouseup', onMouseUp);\n    useEventListener('mouseover', onMouseEnterViewport);\n    useEventListener('mouseout', onMouseLeaveViewport); // Cursors Hover/Active State\n\n    React.useEffect(() => {\n      if (isActive) {\n        cursorInnerRef.current.style.transform = `translate(-50%, -50%) scale(${innerScale})`;\n        cursorOuterRef.current.style.transform = `translate(-50%, -50%) scale(${outerScale})`;\n      } else {\n        cursorInnerRef.current.style.transform = 'translate(-50%, -50%) scale(1)';\n        cursorOuterRef.current.style.transform = 'translate(-50%, -50%) scale(1)';\n      }\n    }, [innerScale, outerScale, isActive]); // Cursors Click States\n\n    React.useEffect(() => {\n      if (isActiveClickable) {\n        cursorInnerRef.current.style.transform = `translate(-50%, -50%) scale(${innerScale * 1.2})`;\n        cursorOuterRef.current.style.transform = `translate(-50%, -50%) scale(${outerScale * 1.4})`;\n      }\n    }, [innerScale, outerScale, isActiveClickable]); // Cursor Visibility State\n\n    React.useEffect(() => {\n      if (isVisible) {\n        cursorInnerRef.current.style.opacity = 1;\n        cursorOuterRef.current.style.opacity = 1;\n      } else {\n        cursorInnerRef.current.style.opacity = 0;\n        cursorOuterRef.current.style.opacity = 0;\n      }\n    }, [isVisible]);\n    React.useEffect(() => {\n      const clickableEls = document.querySelectorAll(clickables.join(','));\n      clickableEls.forEach(el => {\n        el.style.cursor = 'none';\n        el.addEventListener('mouseover', () => {\n          setIsActive(true);\n        });\n        el.addEventListener('click', () => {\n          setIsActive(true);\n          setIsActiveClickable(false);\n        });\n        el.addEventListener('mousedown', () => {\n          setIsActiveClickable(true);\n        });\n        el.addEventListener('mouseup', () => {\n          setIsActive(true);\n        });\n        el.addEventListener('mouseout', () => {\n          setIsActive(false);\n          setIsActiveClickable(false);\n        });\n      });\n      return () => {\n        clickableEls.forEach(el => {\n          el.removeEventListener('mouseover', () => {\n            setIsActive(true);\n          });\n          el.removeEventListener('click', () => {\n            setIsActive(true);\n            setIsActiveClickable(false);\n          });\n          el.removeEventListener('mousedown', () => {\n            setIsActiveClickable(true);\n          });\n          el.removeEventListener('mouseup', () => {\n            setIsActive(true);\n          });\n          el.removeEventListener('mouseout', () => {\n            setIsActive(false);\n            setIsActiveClickable(false);\n          });\n        });\n      };\n    }, [isActive, clickables]); // Cursor Styles\n\n    const styles = {\n      cursorInner: {\n        zIndex: 999,\n        display: 'block',\n        position: 'fixed',\n        borderRadius: '50%',\n        width: innerSize,\n        height: innerSize,\n        pointerEvents: 'none',\n        backgroundColor: `rgba(${color}, 1)`,\n        ...(innerStyle && innerStyle),\n        transition: 'opacity 0.15s ease-in-out, transform 0.25s ease-in-out'\n      },\n      cursorOuter: {\n        zIndex: 999,\n        display: 'block',\n        position: 'fixed',\n        borderRadius: '50%',\n        pointerEvents: 'none',\n        width: outerSize,\n        height: outerSize,\n        backgroundColor: `rgba(${color}, ${outerAlpha})`,\n        transition: 'opacity 0.15s ease-in-out, transform 0.15s ease-in-out',\n        willChange: 'transform',\n        ...(outerStyle && outerStyle)\n      }\n    }; // Hide / Show global cursor\n\n    document.body.style.cursor = 'none';\n    return /*#__PURE__*/React__default[\"default\"].createElement(React__default[\"default\"].Fragment, null, /*#__PURE__*/React__default[\"default\"].createElement(\"div\", {\n      ref: cursorOuterRef,\n      style: styles.cursorOuter\n    }), /*#__PURE__*/React__default[\"default\"].createElement(\"div\", {\n      ref: cursorInnerRef,\n      style: styles.cursorInner\n    }));\n  }\n  /**\n   * AnimatedCursor\n   * Calls and passes props to CursorCore if not a touch/mobile device.\n   */\n\n\n  function AnimatedCursor({\n    outerStyle,\n    innerStyle,\n    color,\n    outerAlpha,\n    innerSize,\n    innerScale,\n    outerSize,\n    outerScale,\n    trailingSpeed,\n    clickables\n  }) {\n    if (typeof navigator !== 'undefined' && IsDevice.any()) {\n      return /*#__PURE__*/React__default[\"default\"].createElement(React__default[\"default\"].Fragment, null);\n    }\n\n    return /*#__PURE__*/React__default[\"default\"].createElement(CursorCore, {\n      outerStyle: outerStyle,\n      innerStyle: innerStyle,\n      color: color,\n      outerAlpha: outerAlpha,\n      innerSize: innerSize,\n      innerScale: innerScale,\n      outerSize: outerSize,\n      outerScale: outerScale,\n      trailingSpeed: trailingSpeed,\n      clickables: clickables\n    });\n  }\n\n  AnimatedCursor.propTypes = {\n    color: propTypes.exports.string,\n    outerAlpha: propTypes.exports.number,\n    innerSize: propTypes.exports.number,\n    outerSize: propTypes.exports.number,\n    outerScale: propTypes.exports.number,\n    innerScale: propTypes.exports.number,\n    outerStyle: propTypes.exports.object,\n    innerStyle: propTypes.exports.object,\n    trailingSpeed: propTypes.exports.number,\n    clickables: propTypes.exports.array\n  };\n\n  return AnimatedCursor;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-animated-cursor/dist/index.umd.js\n");

/***/ })

}]);